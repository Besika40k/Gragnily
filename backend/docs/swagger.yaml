openapi: 3.0.0
info:
  title: Book API
  version: 1.0.0
  description: API to manage and fetch book records

servers:
  - url: https://gragnily.onrender.com

paths:
  /api/books:
    get:
      summary: Get all books
      tags: [Books]
      responses:
        200:
          description: List of Books
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/Book"
    post:
      summary: Create a new book
      tags: [Books]
      description: >
        Creates a new book entry with the provided details. 
        The epub_file is uploaded to Cloudinary as a raw file, 
        therefore it can't directly be viewed with the provided URL
        (requires some tweaking from the frontend side).
      security:
        - xAccessToken: []
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              type: object
              properties:
                title:
                  type: string
                  description: The title of the book
                author:
                  type: array
                  items:
                    type: string
                  description: List of authors' names
                genre:
                  type: array
                  items:
                    type: string
                  description: List of genres
                publisher_name:
                  type: string
                  description: The publisher of the book
                publication_year:
                  type: integer
                  description: The year the book was published
                language:
                  type: string
                  description: The language of the book
                cover_image:
                  type: string
                  format: binary
                  description: Cover image file of the book
                pdf_file:
                  type: string
                  format: binary
                  description: PDF version of the book
                epub_file:
                  type: string
                  format: binary
                  description: EPUB version of the book
              required:
                - title
                - author
                - genre
                - publisher_name
                - publication_year
                - language
                - cover_image
                - pdf_file
      responses:
        "200":
          description: Successfully created book
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Book"
        "400":
          description: Invalid input or missing required fields
        "500":
          description: Internal server error

  /api/books/{id}:
    get:
      summary: Get a book by ID
      description: Retrieve a book by its unique ID.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the book to retrieve
          schema:
            type: string
      responses:
        200:
          description: Book retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  foundBook:
                    $ref: "#/components/schemas/Book"
        404:
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book not found"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error on book.find"
                  error:
                    type: string
                    example: "Error message here"

    put:
      summary: Update an existing book
      description: Updates the details of a book by its ID. Write only what has to be changed in JSON
      tags: [Books]
      parameters:
        - name: id
          in: path
          description: The ID of the book to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                title:
                  type: string
                  example: "New Book Title"
                author:
                  type: array
                  items:
                    type: string
                  example: ["Author Name"]
                genre:
                  type: string
                  example: "Fiction"
                publisher_name:
                  type: string
                  example: "Publisher Name"
                publication_year:
                  type: integer
                  example: 2023
                language:
                  type: string
                  example: "English"
      responses:
        200:
          description: Book updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book updated successfully"
                  book:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "643d1f9e8f1b2c001c8e4d5a"
                      title:
                        type: string
                        example: "New Book Title"
                      author:
                        type: array
                        items:
                          type: object
                          properties:
                            author_id:
                              type: string
                              example: "643d1f9e8f1b2c001c8e4d5b"
                            name:
                              type: string
                              example: "Author Name"
                      genre:
                        type: string
                        example: "Fiction"
                      publisher_name:
                        type: string
                        example: "Publisher Name"
                      publication_year:
                        type: integer
                        example: 2023
                      language:
                        type: string
                        example: "English"
        400:
          description: Book ID is required
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book ID is required"
        404:
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book Not Found"
        500:
          description: Error updating book
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error updating Book"
                  errorMessage:
                    type: string
                    example: "Error message here"

    delete:
      summary: Delete a book
      description: Deletes a book by its ID.
      tags:
        - Books
      parameters:
        - name: id
          in: path
          required: true
          description: The ID of the book to delete.
          schema:
            type: string
            example: "643d1f4e8f1b2c0012345678"
      responses:
        "200":
          description: Book deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book deleted successfully"
                  book:
                    type: object
                    description: The deleted book object (if applicable).
        "400":
          description: Bad Request - Missing or invalid book ID
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book ID is required"
        "404":
          description: Book not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Book not found"
        "500":
          description: Internal Server Error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error deleting book"
                  error:
                    type: string
                    example: "Detailed error message"
  /api/authors:
    get:
      summary: Retrieve a list of authors
      tags: [author]
      description: Fetches all authors from the database.
      responses:
        "200":
          description: Successfully retrieved authors
          content:
            application/json:
              schema:
                type: object
                properties:
                  authors:
                    type: array
                    items:
                      $ref: "#/components/schemas/Author"
        "500":
          description: Internal server error
    post:
      summary: Create a new author
      tags: [author]
      description: Creates a new author entry with the provided details (name, birth year, nationality).
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  description: Name of the author
                birth_year:
                  type: integer
                  description: Year the author was born
                nationality:
                  type: string
                  description: Nationality of the author
              required:
                - name
      responses:
        "200":
          description: Author successfully created
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    type: string
                    example: "successful"
        "400":
          description: Missing or invalid input (name cannot be empty)
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    type: string
                    example: "name can't be empty"
        "500":
          description: Internal server error
  /api/authors/{id}:
    get:
      summary: Retrieve author by name
      tags: [author]
      description: Fetches an author by the provided name (ID) parameter.
      parameters:
        - name: id
          in: path
          required: true
          description: The name of the author to retrieve
          schema:
            type: string
      responses:
        "200":
          description: Successfully retrieved author
          content:
            application/json:
              schema:
                type: object
                properties:
                  authors:
                    type: array
                    items:
                      $ref: "#/components/schemas/Author"
        "404":
          description: Author not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    type: string
                    example: "Author Not Found"
        "500":
          description: Internal server error
    put:
      summary: Update an existing author
      description: Updates the details of an author by their ID.
      tags: [author]
      parameters:
        - name: id
          in: path
          description: The ID of the author to update
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: "John Doe"
                birth_year:
                  type: integer
                  example: 1980
                nationality:
                  type: string
                  example: "American"
      responses:
        200:
          description: Author successfully updated
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    type: string
                    example: "Author successfully updated"
                  Author:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "643d1f9e8f1b2c001c8e4d5a"
                      name:
                        type: string
                        example: "John Doe"
                      birth_year:
                        type: integer
                        example: 1980
                      nationality:
                        type: string
                        example: "American"
        500:
          description: Error updating author
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    type: string
                    example: "Error Updating Author"
                  error:
                    type: string
                    example: "Error message here"

    delete:
      summary: Delete an author
      description: Deletes an author by their ID.
      tags: [author]
      parameters:
        - name: id
          in: path
          description: The ID of the author to delete
          required: true
          schema:
            type: string
      responses:
        200:
          description: Author successfully deleted
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    type: string
                    example: "Author successfully deleted"
                  Author:
                    type: object
                    properties:
                      _id:
                        type: string
                        example: "643d1f9e8f1b2c001c8e4d5a"
                      name:
                        type: string
                        example: "John Doe"
                      birth_year:
                        type: integer
                        example: 1980
                      nationality:
                        type: string
                        example: "American"
        500:
          description: Error deleting author
          content:
            application/json:
              schema:
                type: object
                properties:
                  comment:
                    type: string
                    example: "Error Deleting Author"
                  error:
                    type: string
                    example: "Error message here"
  /api/auth/signUp:
    post:
      summary: User Registration
      description: Registers a new user and returns authentication tokens in cookies.
      operationId: signUp
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - username
                - email
                - password
              properties:
                username:
                  type: string
                  example: johndoe
                email:
                  type: string
                  format: email
                  example: johndoe@example.com
                password:
                  type: string
                  format: password
                  example: P@ssw0rd123
      responses:
        '200':
          description: Registration successful
          headers:
            Set-Cookie:
              description: Authentication and refresh tokens
              schema:
                type: string
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Registration successful
        '400':
          description: Bad Request (missing or invalid parameters)
        '500':
          description: Internal Server Error
  /api/auth/signin:
    post:
      summary: User login
      description: Authenticates a user and returns a JWT access token.
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                username:
                  type: string
                  description: The username of the user
                  example: "john_doe"
                password:
                  type: string
                  description: The password of the user
                  example: "password123"
      responses:
        200:
          description: User authenticated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    description: The unique ID of the user
                    example: "643d1f9e8f1b2c001c8e4d5a"
                  username:
                    type: string
                    description: The username of the user
                    example: "john_doe"
                  email:
                    type: string
                    description: The email of the user
                    example: "john.doe@example.com"
                  roles:
                    type: array
                    items:
                      type: string
                    description: List of roles assigned to the user
                    example: ["ROLE_ADMIN", "ROLE_USER"]
                  accessToken:
                    type: string
                    description: The JWT access token
                    example: "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
        401:
          description: Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: null
                  message:
                    type: string
                    example: "Invalid Password!"
        404:
          description: User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "User Not Found!"
        500:
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: "Error message here"
components:
  securitySchemes:
    xAccessToken:
      type: apiKey
      in: header
      name: x-access-token
  schemas:
    Author:
      type: object
      properties:
        _id:
          type: string
          description: The unique ID of the author
        name:
          type: string
          description: Name of the author
        bio:
          type: string
          description: Biography of the author
        birth_year:
          type: integer
          description: Year the author was born
    Book:
      type: object
      properties:
        _id:
          type: string
          description: The unique ID of the book
        title:
          type: string
          description: Title of the book
        author:
          type: array
          items:
            type: object
            properties:
              author_id:
                type: string
                description: The unique ID of the author
              name:
                type: string
                description: Name of the author
        genre:
          type: array
          items:
            type: string
          description: List of genres
        publisher_name:
          type: string
          description: Name of the publisher
        publication_year:
          type: integer
          description: Year the book was published
        language:
          type: string
          description: Language of the book
        page_count:
          type: integer
          description: Number of pages in the book
        cover_image_url:
          type: string
          format: uri
          description: URL of the cover image
        ci_public_id:
          type: string
          description: Public ID of the cover image in Cloudinary
        pdf_url:
          type: string
          format: uri
          description: URL of the PDF file
        pdf_public_id:
          type: string
          description: Public ID of the PDF file in Cloudinary
        epub_url:
          type: string
          format: uri
          description: URL of the EPUB file
        epub_public_id:
          type: string
          description: Public ID of the EPUB file in Cloudinary
        __v:
          type: integer
          description: Version key
